// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imageUrl String?
    firstName String?
    lastName String?
    emailAddress String @unique
    credits Int @default(150) 
    


    UserToProject UserToProject[]

    questionAsked Question[]

    Stripe Stripe[]
}


model Question {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question String
    answer String
    filesReferences Json?

    projectId String

    project Project @relation(fields:[projectId],references: [id])

    userId String
    user User  @relation(fields: [userId],references: [id])


}

model Meeting {
    id String @id @default(uuid())
    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    meetingUrl String
    projectId String
    project Project @relation(fields: [projectId],references: [id])
    status MeetingStatus @default(PROCESSING)
    issues Issue[]

}


model Issue{
    id String @id @default(uuid())
    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    start String
    end String
    gist String
    headline String
    summary String

    meetingId String
    meeting Meeting @relation(fields: [meetingId],references: [id])
}


enum MeetingStatus{
    PROCESSING
    COMPLETED
}

model Stripe {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user User @relation(fields: [userId],references: [id])
    credits Int
}

model Project {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String
    repoUrl String
    deletedAt DateTime?


    UserToProject UserToProject[]

    Commit Commits[]

    SourceCodeEmbedding SourceCodeEmbedding[]
    savedQuestions Question[]

    Meeting Meeting[]
}


model UserToProject{
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    projectId String

    user User @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}


model Commits {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    projectId String
    project Project @relation(fields:[projectId],references: [id])

    commitMessage String
    commitHash String 
    commitAuthorName String
    CommitAuthorAvatar String
    CommitDate DateTime

    Summary String?

}

model SourceCodeEmbedding{
    id String @id @default(uuid())
    summaryEmbedding Unsupported("vector(768)")?
    sourceCode String
    fileName String
    summary String
    projectId String
    project Project @relation(fields:[projectId],references: [id])

}